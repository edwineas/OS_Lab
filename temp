#include <stdio.h>

#define MAX_PROCESSES 10

#define QUANTUM 4

typedef struct {

    int pid;

    int burst_time;

    int remaining_time;

} process;

int main() {

    process processes[MAX_PROCESSES];

    int num_processes, total_burst_time = 0;

    int time = 0, remaining_processes = 0;

    int i, j;

    // Get input from user

    printf("Enter the number of processes: ");

    scanf("%d", &num_processes);

    for (i = 0; i < num_processes; i++) {

        printf("Enter burst time for process %d: ", i+1);

        scanf("%d", &processes[i].burst_time);

        processes[i].remaining_time = processes[i].burst_time;

        processes[i].pid = i+1;

        total_burst_time += processes[i].burst_time;

    }

    // Run the scheduler

    printf("\nRound Robin scheduling with quantum = %d\n\n", QUANTUM);

    while (remaining_processes < num_processes) {

        for (i = 0; i < num_processes; i++) {

            if (processes[i].remaining_time > 0) {

                printf("Time %d: Running process %d\n", time, processes[i].pid);

                processes[i].remaining_time -= QUANTUM;

                time += QUANTUM;

                if (processes[i].remaining_time <= 0) {

                    printf("Time %d: Process %d finished\n", time, processes[i].pid);

                    remaining_processes++;

                }

            }

        }

    }

    // Calculate average waiting time and turnaround time

    float avg_waiting_time = 0, avg_turnaround_time = 0;

    for (i = 0; i < num_processes; i++) {

        int turnaround_time = total_burst_time - processes[i].burst_time;

        int waiting_time = turnaround_time - (processes[i].burst_time - processes[i].remaining_time);

        avg_turnaround_time += turnaround_time;

        avg_waiting_time += waiting_time;

    }

    avg_waiting_time /= num_processes;

    avg_turnaround_time /= num_processes;

    printf("\nAverage waiting time: %.2f\n", avg_waiting_time);

    printf("Average turnaround time: %.2f\n", avg_turnaround_time);

    return 0;

}

